{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Lab_Fully_Connect_Network_on_Keras.ipynb","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"jGCyq4W6fak8","colab_type":"text"},"cell_type":"markdown","source":["# Fully Connect Network on Keras\n","\n","- https://pythonprogramming.net/introduction-deep-learning-python-tensorflow-keras/\n","    1. Data Import\n","    2. Build Model\n","    3. Train Model\n","    4. Evaluate Model\n","    5. Prediction"]},{"metadata":{"id":"4TcnbJZTl29V","colab_type":"code","colab":{}},"cell_type":"code","source":["%matplotlib inline\n","import tensorflow as tf  # deep learning library. Tensors are just multi-dimensional arrays\n","import matplotlib.pyplot as plt"],"execution_count":0,"outputs":[]},{"metadata":{"id":"utB8T2T_feWf","colab_type":"text"},"cell_type":"markdown","source":["## 1. Data Import"]},{"metadata":{"id":"q1v5vI-tok0y","colab_type":"code","outputId":"7e54bcb8-8ebc-4546-8fb5-a7042bc47a29","executionInfo":{"status":"ok","timestamp":1540269833444,"user_tz":-540,"elapsed":2026,"user":{"displayName":"Jongho Kim","photoUrl":"","userId":"01418265235228620365"}},"colab":{"base_uri":"https://localhost:8080/","height":53}},"cell_type":"code","source":["mnist = tf.keras.datasets.mnist  # mnist is a dataset of 28x28 images of handwritten digits and their labels\n","(x_train, y_train),(x_test, y_test) = mnist.load_data()  # unpacks images to x_train/x_test and labels to y_train/y_test"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"metadata":{"id":"SSfP0gxboweq","colab_type":"code","colab":{}},"cell_type":"code","source":["x_train = tf.keras.utils.normalize(x_train, axis=1)  # scales data between 0 and 1\n","x_test = tf.keras.utils.normalize(x_test, axis=1)  # scales data between 0 and 1"],"execution_count":0,"outputs":[]},{"metadata":{"id":"lc5aypa_fgox","colab_type":"text"},"cell_type":"markdown","source":["## 2. Build Model"]},{"metadata":{"id":"WYAk59OdoxMh","colab_type":"code","outputId":"7a309472-6159-4dd2-d773-2301360dd29a","executionInfo":{"status":"ok","timestamp":1540270145168,"user_tz":-540,"elapsed":29181,"user":{"displayName":"Jongho Kim","photoUrl":"","userId":"01418265235228620365"}},"colab":{"base_uri":"https://localhost:8080/","height":125}},"cell_type":"code","source":["model = tf.keras.models.Sequential()  # a basic feed-forward model\n","model.add(tf.keras.layers.Flatten())  # takes our 28x28 and makes it 1x784\n","model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))  # a simple fully-connected layer, 128 units, relu activation\n","model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))  # a simple fully-connected layer, 128 units, relu activation\n","model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))  # our output layer. 10 units for 10 classes. Softmax for probability distribution\n","\n","model.compile(optimizer='adam',  # Good default optimizer to start with\n","              loss='sparse_categorical_crossentropy',  # how will we calculate our \"error.\" Neural network aims to minimize loss.\n","              metrics=['accuracy'])  # what to track\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Epoch 1/3\n","60000/60000 [==============================] - 10s 165us/step - loss: 12.3248 - acc: 0.2346\n","Epoch 2/3\n","60000/60000 [==============================] - 9s 152us/step - loss: 12.4417 - acc: 0.2280\n","Epoch 3/3\n","60000/60000 [==============================] - 9s 151us/step - loss: 11.9927 - acc: 0.2559\n"],"name":"stdout"}]},{"metadata":{"id":"k40HQQPzfmsq","colab_type":"text"},"cell_type":"markdown","source":["## 3. Train the Model"]},{"metadata":{"id":"myPQQQ00fsPP","colab_type":"code","colab":{}},"cell_type":"code","source":["model.fit(x_train, y_train, epochs=3)  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"qnjguJm6QN3m","colab_type":"code","outputId":"c65794ab-c4b5-48eb-f841-bddd7867901a","executionInfo":{"status":"ok","timestamp":1540270146192,"user_tz":-540,"elapsed":995,"user":{"displayName":"Jongho Kim","photoUrl":"","userId":"01418265235228620365"}},"colab":{"base_uri":"https://localhost:8080/","height":287}},"cell_type":"code","source":["model.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","flatten (Flatten)            multiple                  0         \n","_________________________________________________________________\n","dense (Dense)                multiple                  100480    \n","_________________________________________________________________\n","dense_1 (Dense)              multiple                  16512     \n","_________________________________________________________________\n","dense_2 (Dense)              multiple                  1290      \n","=================================================================\n","Total params: 118,282\n","Trainable params: 118,282\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"metadata":{"id":"uWNsnhkofxag","colab_type":"text"},"cell_type":"markdown","source":["## 4. Evaluate the Model"]},{"metadata":{"id":"EWmVt04ro0o5","colab_type":"code","outputId":"0f288325-1f5c-45c1-e34e-3b746768334d","executionInfo":{"status":"ok","timestamp":1539001536966,"user_tz":-540,"elapsed":1318,"user":{"displayName":"Jongho Kim","photoUrl":"","userId":"01418265235228620365"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"cell_type":"code","source":["val_loss, val_acc = model.evaluate(x_test, y_test)  # evaluate the out of sample data with model\n","print(val_loss)  # model's loss (error)\n","print(val_acc)  # model's accuracy"],"execution_count":0,"outputs":[{"output_type":"stream","text":["10000/10000 [==============================] - 1s 75us/step\n","0.09406164860930294\n","0.9695\n"],"name":"stdout"}]},{"metadata":{"id":"2_HDvHh8f0qy","colab_type":"text"},"cell_type":"markdown","source":["## 5. Prediction"]},{"metadata":{"id":"gLG4yAmlo8xx","colab_type":"code","outputId":"4a78561a-814e-4759-9a8d-143767145506","executionInfo":{"status":"ok","timestamp":1539001661725,"user_tz":-540,"elapsed":1508,"user":{"displayName":"Jongho Kim","photoUrl":"","userId":"01418265235228620365"}},"colab":{"base_uri":"https://localhost:8080/","height":282}},"cell_type":"code","source":["predictions = model.predict(x_test)\n","\n","import numpy as np\n","\n","print(np.argmax(predictions[0]))\n","\n","plt.imshow(x_test[0],cmap=plt.cm.binary)\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["7\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<matplotlib.figure.Figure at 0x7f4d6abdbe10>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"VeivsjIJo_Y_","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}